@page "/addgig"
@inject IGigRepository Repo
@attribute [Authorize]
@inject GigService gigService
<h3>Add Gig</h3>

<button @onclick="AddGigs" disabled="@adding">Add 10 Random Gigs</button>

<div class="row">
    <div class="col-4">

        <EditForm Model="_gig" OnValidSubmit="HandleAddGig">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label for="location">Location</label>
                <InputText @bind-Value="_gig.Location" id="location" class="form-control" />
                <ValidationMessage For="@(() => _gig.Location)" />
            </div>

            <div class="form-group">
                <label for="date">Date</label>
                <InputDate @bind-Value="_gig.Date" id="date" class="form-control" />
                <ValidationMessage For="@(() => _gig.Date)" />
            </div>

            <div class="form-group">
                <label for="payment">Payment</label>
                <InputNumber @bind-Value="_gig.Payment" id="payment" class="form-control" />
                <ValidationMessage For="@(() => _gig.Payment)" />
            </div>

            <div class="form-group">
                <label for="hasBeenPaid">Paid</label>
                <InputCheckbox @bind-Value="_gig.HasBeenPaid" id="hasBeenPaid" />
            </div>

            <button class="btn btn-primary" type="submit">Add Gig</button>
            <input class="btn btn-outline-primary" type="button" value="Cancel" @onclick="HandleCancel" />
        </EditForm>

    </div>
</div>
@code {
    Gig _gig = new Gig();
    private bool adding = false;

    public async Task HandleAddGig()
    {
        //var result = await Http.PostAsJsonAsync("", _gig);
        Console.WriteLine("Form submitted successfully!");
        await Repo.AddGigAsync(_gig);
        _gig = new Gig();

    }

    public async Task AddGigs()
    {
        var locations = new[]
        {
            "Redmond, WA",
            "Lead, SD",
            "Sofia, Bulgaria",
            "Mumbai, India",
            "Amsterdam, Netherlands",
            "Lisbon, Portugal",
            "Venice, Italy",
            "Minsk, Belarus",
            "St. Petersburg, Russia",
            "London, U.K.",
            "Dublin, Ireland",
            "Paris, France",
            "Tokyo, Japan",
            "Hong Kong, China",
            "Vancouver, Canada"
        };

        adding = true;
        var random = new Random();
        for (var idx = 0; idx < 10; idx++)
        {
            var gig = new Gig();
            gig.Date = DateTime.Now.AddHours(random.Next(24, 24 * 7 * 28));
            gig.HasBeenPaid = random.NextDouble() < 0.6;
            gig.Payment = (double)random.Next(5, 999);
            gig.Location = locations[random.Next(locations.Length)];
            await Repo.AddGigAsync(gig);
        }
        adding = false;

    }

    void HandleCancel()
    {
        _gig = new Gig();
    }
}
